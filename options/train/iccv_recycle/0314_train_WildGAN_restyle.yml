# general settings
name: 0314_maskloss_restyle_afhq
model_type: FaceGAN_Model_0922
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0
is_mimo: true

# dist: true
# find_unused_parameters: true

# dataset and data loader settings
datasets:
  train:
    name: AFHQ_WILD
    type: Face_Dataset
    dataroot_gt: ~
    dataroot_gt_list: ['datasets/Image_Generation/LSUN/afhq/afhq/train/wild']
    mode: mix_id
    gt_size: 512
    max_length: 1
    fix_input: false
    random_seed: 0
    io_backend:
      type: disk
    use_hflip: true
    mean: [0.5, 0.5, 0.5]
    std: [0.5, 0.5, 0.5]

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 1
    batch_size_per_gpu: 2
    dataset_enlarge_ratio: 100 # 100
    prefetch_mode: ~

  val:
    name: wild_val
    type: Face_Dataset
    dataroot_gt: datasets/Image_Generation/LSUN/afhq/wild_val
    mode: mix_id
    gt_size: 512
    max_length: 1
    fix_input: false
    random_seed: 0
    io_backend:
      type: disk
    use_hflip: false
    mean: [0.5, 0.5, 0.5]
    std: [0.5, 0.5, 0.5]


# network structures
network_g:
  type: pSp_like_inversion_v8_restyle_afhq
  out_size: 512
  style_dim: 512
  StyleGAN_pth: experiments/pretrained_models/StyleGAN2/afhqwild.pt
  E4E_pth: experiments/pretrained_models/inversion/restyle_e4e_afhq_encode.pt
  enc_cycle: 10
  enable_modulation: true
  modulation_type: NOISE
  warp_scale: 0.02
  cycle_align: 2
  mod_bias: false
  blend_with_gen: true
  ModSize: ~
  progressiveModSize: [32, 64, 128]
  progressiveModFrozen: false
  ModDropout_p: 0.0
  stage: Inference
  progressiveStart: 1000 # 5000
  progressiveStep: 2000 # 25000
  progressiveStageSteps: ~ # leave it none for automatic gensssseration

# network_d:
  # type: FaceGAN_Discriminator_V2
  # size: 1024
  # channel_multiplier: 2
  # blur_kernel: [1, 3, 3, 1]

network_d:
  type: StyleGAN2Discriminator_mod
  out_size: 512
  channel_multiplier: 2
  resample_kernel: [1, 3, 3, 1]

network_d2:
  type: LatentDiscrinimator
  chn: 18
  dim: 512
  n_mlp: 8
  hidden_chn: 4

# path
path:
  pretrain_network_g: ~ #'experiment_workspace/experiments/legacy/0301_maskloss_restyle/models/net_g_14000.pth'
  param_key_g: 'params_ema'
  strict_load_g: false
  pretrain_network_d: ~ #experiments/pretrained_models/StyleGAN2/stylegan2_ffhq_config_f_1024_discriminator_official-a386354a.pth
  param_key_d: 'params'
  strict_load_d: true
  resume_state: ~
  
# training settings
train:
  optim_g:
    type: Adam
    lr: !!float 2e-5
    generator_lr_decay: !!float 1.0

  optim_d:
    type: Adam
    lr: !!float 2e-5

  optim_d2:
    type: Adam
    lr: !!float 2e-6

  scheduler:
    type: MultiStepLR
    milestones: 15000
    gamma: 0.75

  total_iter: 1800000
  warmup_iter: -1  # no warm up

  # fix generator before startup_iter
  startup_iter: 1800000
  fix_and_grad: 
    fix: ['generator', 'avg_latent', 'encoder'] # , 'alignment', 'residual_encoder'
    grad: []

  autocast: false
  skip_latent_g: true
  skip_gen_g: false
  which_gt: gt
  grad_clip_norm: 999.0

  # losses
  gan_opt:
    type: GANLoss
    gan_type: wgan_softplus
    loss_weight: !!float 5e-1

  # r1 regularization for discriminator
  r1_reg_weight: 10
  # path length regularization for generator
  path_batch_shrink: 2
  path_reg_weight: 2

  net_g_reg_every: 99999999 # 4
  net_d_reg_every: 99999999 # 16
  mixing_prob: 0.9

  net_d_iters: 1
  net_d_init_iters: 0

  pix_opt:
    type: MSELoss
    loss_weight: 1.0

  # id_opt:
  #   type: IDLoss
  #   loss_weight: 0.1
  #   ref_loss_weight: 0.0
  #   ckpt: experiments/pretrained_models/ir_se/model_ir_se50.pth

  # perceptual_opt:
  #   type: LPIPS_Loss
  #   loss_weight: 0.8
  #   min_max: [-1, 1]
  #   net: alex

  perceptual_opt:
      type: PerceptualLoss
      layer_weights:
        # before relu
        'conv1_2': 0.1
        'conv2_2': 0.1
        'conv3_4': 1
        'conv4_4': 1
        'conv5_4': 1
      vgg_type: vgg19
      use_input_norm: true
      perceptual_weight: !!float 1.0
      style_weight: 50
      range_norm: true
      criterion: l1

  mask_opt:
    type: MaskLoss
    loss_weight: 5.0
    loss_func:
      binary: [32, 64, 128, 512]
      area:
        '32': 0.20
        '64': 0.20
        '128': 0.10
        '512': 0.10
      target: 1
      binary_weight: !!float 4e-2

# validation settings
val:
  val_freq: !!float 4e3
  save_img: true
  save_lq_and_gt: true
  pbar: true

  metrics:
    lpips:
      type: calculate_lpips
      crop_border: 2
      test_y_channel: true
      model_path: experiments/pretrained_models/lpips/alex.pth
      better: lower
    psnr:
      type: calculate_psnr
      crop_border: 2
      test_y_channel: true
      better: higher
    ssim:
      type: calculate_ssim
      crop_border: 2
      test_y_channel: true
      better: higher

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 4e3
  use_tb_logger: true
  wandb:
    project: ~ # reproduce-project
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500


# on RTX3090 server
# export TORCH_CUDA_ARCH_LIST=8.0

# {'exp_dir': '', 'dataset_type': 'cars_encode', 'encoder_type': 'ResNetProgressiveBackboneEncoder', 'batch_size': 8, 'test_batch_size': 8, 'workers': 8, 'test_workers': 8, 'learning_rate': 0.0001, 'optim_name': 'ranger', 'train_decoder': False, 'start_from_latent_avg': True, 'lpips_lambda': 0.8, 'id_lambda': 0.0, 'l2_lambda': 1.0, 'stylegan_weights': '', 'checkpoint_path': '', 'max_steps': 200000, 'image_interval': 100, 'board_interval': 50, 'val_interval': 2500, 'save_interval': 10000, 'w_discriminator_lambda': 0.1, 'w_discriminator_lr': 2e-05, 'r1': 10, 'd_reg_every': 16, 'use_w_pool': True, 'w_pool_size': 50, 'delta_norm': 2, 'delta_norm_lambda': 0.0002, 'progressive_steps': [0, 20000, 22000, 24000, 26000, 28000, 30000, 32000, 34000, 36000, 38000, 40000, 42000, 44000, 46000, 48000], 'progressive_start': 20000, 'progressive_step_every': 2000, 'save_training_data': False, 'sub_exp_dir': None, 'resume_training_from_ckpt': None, 'update_param_list': None, 'n_iters_per_batch': 5, 'input_nc': 6, 'device': 'cuda:0', 'moco_lambda': 0.5, 'w_norm_lambda': 0.0, 'output_size': 512}